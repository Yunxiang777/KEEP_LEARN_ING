🎯 語言層級

高階語言 (C#, Python, Java)：人類易讀，遠離硬體
組合語言 (Assembly)：可讀的機器指令助記符
機械語言：純 0 和 1，CPU 唯一能懂的語言

🔄 執行方式

編譯語言 (C, C++)：先全部轉成機械碼 → 執行快
解釋語言 (Python, JS)：邊讀邊執行 → 開發方便但較慢
混合型 (C#, Java)：先編譯成中間碼 → 再用 JIT 即時編譯執行

⚙️ C# 執行流程
C# 原始碼 → IL 中間語言 → JIT 編譯 → 機械碼
🧩 CLR vs FCL

CLR (Common Language Runtime)：.NET 的執行引擎

管理記憶體、垃圾回收、安全性、例外處理


FCL (Framework Class Library)：.NET 的工具箱

提供現成類別：檔案操作、網路、多執行緒、資料庫等



一句話：CLR 負責「怎麼跑」，FCL 負責「拿什麼跑」

========================================================================================

解決方案，下面有項目，想像成整包，下面有許多小專案

visul studio => ctrl + 滾輪 => code大小縮放
	     => 深黑色背景可以護眼
ctrl + K，ctrl + D => 格式化整齊代碼 1
========================================================================================
🧠 一、C# 是高級語言（High-Level Language）

是的，✅ C# 是高級語言。
它的特點是「人類可讀性高、接近自然語言、遠離硬體細節」。

🔹 高級語言的特點：

不需要直接操作記憶體或暫存器（registers）

由編譯器（compiler）或直譯器（interpreter）負責轉換成機器能懂的語言

一段程式可跨平台（例如 C# 可在 Windows、Linux、macOS 上執行）

可使用高層抽象（例如類別、物件、集合、事件等）

int a = 10;
int b = 20;
int sum = a + b;
Console.WriteLine(sum);


這段程式很容易懂，但底層其實會被轉換成：

IL（Intermediate Language，中介語言）

再由 JIT（Just-In-Time Compiler）轉換成 CPU 的機械碼執行。

⚙️ 二、機械語言（Machine Language）

機械語言（Machine Code） 是電腦能直接理解的唯一語言。
👉 它是由 0 和 1 組成的「二進位指令」。

例如：

10110000 01100001


這可能代表：

把數值 97 載入暫存器 AL 中。

但這完全不可讀，也很難寫。

🧩 三、匯編語言（Assembly Language）

匯編語言（Assembly Language） 是機械語言的「人類可讀版本」。

它使用助記符（mnemonics） 代替 0 和 1。
例如：

MOV AL, 61h


這行代表：

把十六進位數 61 (也就是十進位 97) 放進 AL 暫存器裡。

機械語言版本是：

10110000 01100001


📘 換句話說：

匯編語言是 低階語言（Low-Level Language）。

每一行匯編語言幾乎都對應到一條 CPU 指令。

寫起來難、容易出錯，但執行效率極高。

🧭 四、三者的關係圖：
層級	語言範例	特點
🧍‍♂️ 高階語言	C#, Java, Python	接近人類語言、跨平台、抽象度高
⚙️ 匯編語言	x86 ASM, ARM ASM	接近機器語言、人可讀但複雜
💾 機械語言	10110000 01100001	只有 CPU 能直接理解
🧮 五、舉個實際對照例子
語言	程式範例	說明
C#	int x = 5;	由 C# 編譯器轉成 IL，再轉成機器碼
Assembly	MOV AX, 5	將數字 5 放進 AX 暫存器
Machine code	10111000 00000101	二進位，CPU 直接執行
📚 六、延伸補充
名稱	屬性	備註
低階語言 (Low-Level)	靠近硬體	匯編語言、機械語言
高階語言 (High-Level)	靠近人類語言	C#, Python, Java
中階語言 (Mid-Level)	介於兩者之間	C、C++（可以直接